buildscript {
    ext {
        springBootVer = "1.3.1.RELEASE"
        lombokVer = "1.16.6"
    }
    repositories { jcenter() }
    dependencies { classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}" }
}

group "com.daggerok"
version "1.0.1"

apply plugin: "java"
apply plugin: "idea"
apply plugin: "spring-boot"
apply plugin: "application"

jar { baseName = "blog" }

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories { jcenter() }

dependencies {
    def tomcat = "org.springframework.boot:spring-boot-starter-tomcat",
        lombok = "org.projectlombok:lombok:${lombokVer}"

    compile "org.springframework.boot:spring-boot-starter",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-hateoas",
            "org.springframework.boot:spring-boot-starter-data-rest",
            "org.springframework.boot:spring-boot-starter-data-mongodb",
            "de.flapdoodle.embed:de.flapdoodle.embed.mongo",
            // spring boot metrics and maintain
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-remote-shell",
            // java 8 jsr310 api for at
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.3",
            // utils
            "org.apache.commons:commons-lang3:3.4",
            // code gen
            "${lombok}"

//    runtime "${lombok}", "${tomcat}"
//
//    testRuntime "${lombok}", "${tomcat}"

    testCompile "${lombok}", "org.springframework.boot:spring-boot-starter-test"
}

import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.*
task www(type: Exec) {
    def node = project.hasProperty("node") ? project.property("node") : "build"
    def scriptsDir = "${project.projectDir}/npm"
    def isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
    def script = "${scriptsDir}/${node}." + (isWindows ? "bat" : "sh")

    if (Files.notExists(Paths.get(script))) throw new GradleException("file ${script} wasn't found.")

    workingDir scriptsDir
    commandLine isWindows ? ["cmd", "/c", script] : ["bash", "-x", script]
}

task wrapper(type: Wrapper) { gradleVersion = '2.10' }
task stage { dependsOn build }

// profiles support: gradle prod bootRun
task prod << { bootRun { systemProperty "spring.profiles.active", "prod" } }
task dev << { bootRun { systemProperty "spring.profiles.active", "dev" } }

build.dependsOn www
build.shouldRunAfter www
www.shouldRunAfter clean