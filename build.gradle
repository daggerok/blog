buildscript {
    ext {
        springBootVersion = "1.2.7.RELEASE"
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
//                  "com.moowork.gradle:gradle-gulp-plugin:0.11"
//                  "com.moowork.gradle:gradle-node-plugin:0.11"
    }
}

group "com.daggerok"
version "1.0"

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "spring-boot"

jar {
    baseName = "blog"
    version = "1.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-hateoas",
            "org.springframework.boot:spring-boot-starter-data-rest",
            "org.springframework.boot:spring-boot-starter-data-jpa",

            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-remote-shell",

            "org.projectlombok:lombok:1.16.6"

    runtime "com.h2database:h2"

    testCompile "org.springframework.boot:spring-boot-starter-test",
                "org.springframework.restdocs:spring-restdocs-mockmvc:1.0.0.RC1"
}

import org.apache.tools.ant.taskdefs.condition.Os

task npm(type: Exec) {
    workingDir "${project.projectDir}"

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "cmd", "/c", "npm.bat" // test.me
    } else {
        commandLine "./npm.sh"
    }
    // print to console
    standardOutput = new ByteArrayOutputStream()
    // use npm.output() to get output
    ext.output = { return standardOutput.toString() }
    // ignoreExitValue = true
}

build.dependsOn npm
build.shouldRunAfter npm
npm.shouldRunAfter clean
